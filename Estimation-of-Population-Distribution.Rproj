Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: pdfLaTeX

library(SPARQL)
library(sp)
library(ggplot2)

endpoint <- "http://virtuoso.okfn.gr/sparql"
query <-'
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX vfp:  <http://okfn.gr/ontology/vfp#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/> 
PREFIX dsd:  <http://cordis.okfn.gr/ontology/dsd/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?rcn ?label ?Funding ?totalCost
WHERE { 
?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://okfn.gr/ontology/vfp#Project> .
?s <http://okfn.gr/ontology/vfp#identification> ?rcn .
?s skos:prefLabel ?label .
?s  <http://okfn.gr/ontology/vfp#budget> ?budget .
?budget <http://cordis.okfn.gr/ontology/dsd/FP6/measure/amountTotal> ?totalCost . 
?budget <http://cordis.okfn.gr/ontology/dsd/FP6/measure/amountEU> ?Funding . 
}     
ORDER BY DESC(?totalCost) '
qd <- SPARQL(endpoint, query)
qd <- qd$results

ggplot(data = qd, aes(x=label, y=totalCost)) + theme_bw() + geom_bar(stat="identity") + 
  theme(axis.text.x=element_text(angle=90,hjust=1,vjust=0.5)) + 
  ggtitle("Drug-related Hospital Discharges 2012â€“2013 (Rate per 10,000 people)") 
+ labs(x="Council Area", y="Rate per 100,000 people") + 
  theme(legend.position=
          "none")
library(tree)
library(ISLR)
attach(qd)
str(qd)
High=ifelse(qd$totalCost<=3.504e+06,"No","Yes")
qd=data.frame(qd,High)
head(qd)

tree.qd=tree(High~.-totalCost,qd)
summary(tree.qd)

par(mar=c(3,1,3,1))
plot(tree.qd)
text(tree.qd,pretty=0,cex=0.5)


####Creating the training sample and apply the tree model on it 
set.seed(2)
train=sample(1:nrow(qd), 1000)
qd.test=qd[-train,]
High.test=High[-train]

tree.qd=tree(High~.-totalCost,qd,subset=train)
tree.pred=predict(tree.qd,qd.test,type="class")
xtab1<-table(tree.pred,High.test)
xtab1
(3781+1228)/(3781+1228+112+298)    #no-no+yes-yes/sum
(4590+1235)/(4590+1235+146+349)

### prune the tree (cross validation for determine the optimal level of tree complexity)
set.seed(3)
cv.qd=cv.tree(tree.qd,FUN=prune.misclass)
names(cv.qd)


#### Error rate & cost complexity regards of tree size
plot(cv.qd$size ,cv.qd$dev ,type="b",
     ylab = "cross-validation error rate", xlab = "size")

plot(cv.qd$k ,cv.qd$dev ,type="b",
     ylab = "cost-complexity parameter k", xlab = "size")

### searching for suitable tree
cv.qd

### Tree pruning (We choose to prune the tree in three junctions)
prune.qd=prune.misclass(tree.qd,best=3)
plot(prune.qd)
text(prune.qd,pretty=0,cex=0.85)

### Validation 
tree.pred=predict(prune.qd,qd.test,type="class")
xtab2<-table(tree.pred,High.test)
xtab2
(3781+1228)/(3781+1228+298+112)    ## 0.9243403
(4590+1235)/(4590+1235+146+349)


### Regression trees

#Tree construction
set.seed (1)
train = sample (1: nrow(qd), nrow(qd)/2)

tree.boston =tree(totalCost~.,qd ,subset =train)
summary (tree.boston )

plot(tree.boston)
text(tree.boston ,pretty =0,cex=0.85)

#Pruning
cv.boston =cv.tree(tree.boston)
cv.boston

cvtable<-cbind(cv.boston$size,cv.boston$dev)
colnames(cvtable)<-c('size','deviance')
cvtable
min(cvtable[,2])
plot(cv.boston$size ,cv.boston$dev ,type='b')

prune.boston =prune.tree(tree.boston ,best =6)
plot(prune.boston )
text(prune.boston ,pretty =0,cex=0.85)


#### Prediction for test data
yhat=predict(tree.boston ,newdata =qd[-train,])
boston.test=qd[-train ,"totalCost"]
plot(yhat ,boston.test)
abline (0,1)

# Mean square error
library(Metrics)
mse(yhat,boston.test)
mean((yhat -boston.test)^2)



